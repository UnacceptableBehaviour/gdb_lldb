// compile with - C++17
//
// g++ -v -Wall -Weffc++ -std=c++17 test_c++.cc -o test_c++
// -v 		    verbose show commands issued by compiler / linker
// -Wall 	    show c++ related warnnings
// -Weff++ 	  warning generated by code that breaks coding advice in Effective C++ - S.Meyers   
// -g  		    include debugger information
// -std=c++17 __cplusplus=201703 => C++ Standard=C++17

// GDB-LLDB command map - https://lldb.llvm.org/use/map.html
// Intro LLDB - https://towardsdatascience.com/an-introduction-to-debugging-in-c-and-lldb-part-i-e3c51991f83a
// LLDB command format - <noun> <verb> [-options [option-value]] [argument [argument...]]
//						  |		  |
//	target (thread, frame etc)	  |
//							   command
//
// (lldb) breakpoint set -l 39					# set BP at line 39
// (lldb) settings show target.run-args			# show args passed in to start
// target.run-args (array of strings) =
//   [0]: "turkey"
//   [1]: "cruffins"
// (lldb) thread step-in 						# step in
// (lldb) step 
// (lldb) s
// (lldb) thread step-over 						# step over
// (lldb) next 
// (lldb) n 
// (lldb) thread step-out 						# step out of current frame
// (lldb) finish 
// (lldb) breakpoint set --name main 			# set BP function main
// (lldb) br s -n main 
// (lldb) b main
// (lldb) breakpoint list 						# list BPs
// (lldb) br l
// (lldb) breakpoint delete 1 					# del BP
// (lldb) br del 1
// 												# set BP in FILE at LINE no.
// (lldb) breakpoint set --file test.c --line 12 		
// (lldb) br s -f test.c -l 12 
// (lldb) b test.c:12
// 												# conditional BP
// (lldb) breakpoint set --name foo --condition '(int)strcmp(y,"hello") == 0' 
// (lldb) br s -n foo -c '(int)strcmp(y,"hello") == 0'
											

// quick note about python2 - err WTF? yep . .
// https://www.legendiary.at/2016/11/27/lldb-nameerror-name-run_one_line-is-not-defined/
// and a fix: https://github.com/Homebrew/homebrew-core/issues/2730
// quick answer its a python dependency issue
// easy fix: $ python3 -m venv venv											# create clean environment
//           $ . venv/bin/activate											# activate it
//           $ g++ -v -Wall -Weffc++ -g null_ref.cc interface_demo.cc -o null_ref	# compile c++
//           $ lldb null_ref turkey cruffins								# fire up debugger w/ args
//           (lldb) run 													# execute
//           Process 29761 launched: '/Users/simon/a_syllabus/lang/c++/
//           compile_hello_world_refs_pointers/null_ref' (x86_64)


//#include<cassert>
//#include<iostream>
//using namespace std;
//
//#include"interface_demo.h"
//
//
//unsigned int read_io_pin_00 (void) {
//	volatile int port_pins = 0x50;		// simulate a port read
//										
//	return port_pins & 0x01;	
//}
//
//// call_stack(5) to create a 5 frame call stack
//// set BP on new_depths = 0xFF0
//int call_stack(int deep, int how_deep = 0){
//	
//	volatile long int new_depths = 0xFF << how_deep;
//	
//	cout << new_depths << endl;
//	
//	if (how_deep <= deep)
//		call_stack(deep, how_deep+1);
//	
//	return 0; 
//}

// std::cout << a << b << '\n';
// std::cout << n << ", " << n << ", " << n << ", " << n << ", " << " \n";
#include <iostream>
//#include <string>
//#include <algorithm>  // std::find, std::for_each

void p(int v, std::string msg=""){
    std::cout << msg << ": " << v << " \n";  
}

//#include <vector>
//void pv(std::vector<int> v, std::string msg=""){
//    std::cout << msg << ": " << "v = { ";
//    for (int n : v) {
//        std::cout << n << " ";
//    }
//    std::cout << "}; \n";  
//}



// https://cppquiz.org/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
// q011.cc

int a;                  // static storage duration - declared at namespace scope - initialised to 0
char b[12] = "DEADBEEF";
static int i;           // static here denotes internal linkage
                        // IE only visibly in this translation unit
                        // translation unit - compiled file including headers (after preprocessor has run)
                        // object exe or library file

int main () {
    int c;              //
    
    std::cout << a << std::endl;
    std::cout << b << std::endl;;
    std::cout << c << std::endl;;
}

// well I put undefined because I assumed it would be uninitiliased -(quiz says incorrect)
// - TRUE if declared inside main
//
// Since a has static storage duration and no initializer, it is guaranteed to be zero-initialized.
// Had a been defined as a local non-static variable inside main(), this would not have happened.
// 
// Note: int a has static storage duration because it is declared at namespace scope.
// It does not need to have static in front of it, that would only denote internal linkage.


// looking with the debugger add -g to compile
// > g++ -g -v -Wall -Weffc++ -std=c++17 test_c++.cc -o test_c++
// > .pe   // activate python env - still need this? check
// > lldb ./test_c++
// (lldb) expression a
// (int) $0 = 0
// (lldb) expression &a
// (int *) $1 = 0x00000001000080b0
// (lldb) q
//
// (venv) gdb_lldb % lldb ./test_c++                                             
// (lldb) target create "./test_c++"
// Current executable set to '../gdb_lldb/test_c++' (x86_64).
// 
// (lldb) expression a
// (int) $0 = 0
// (lldb) expression c
// (int) $1 = 0
// (lldb) expression b
// (char [12]) $2 = "DEADBEEF"
// 
// (lldb) expression &a
// (int *) $3 = 0x00000001000080cc
// (lldb) expression &b
// (char (*)[12]) $4 = 0x00000001000080c0
// (lldb) expression &c
// (int *) $5 = 0x00000001000080d0
// 
// (lldb) expression $2
// (char [12]) $2 = "DEADBEEF"

// (lldb) list
//    114 	int main () {
//    115 	    int c;
//    116 	    
//    117 	    std::cout << a << std::endl;
//    118 	    std::cout << b << std::endl;;
//    119 	    std::cout << c << std::endl;;
//    120 	}
//    121 	
//    122 	// well I put undefined because I assumed it would be uninitiliased
//    123 	// quiz says incorrect
   
//                                                    RUN CODE IN DEBUGGER
// (lldb) r
// Process 4638 launched: '../gdb_lldb/test_c++' (x86_64)
// 0
// DEADBEEF
// 0
// Process 4638 exited with status = 0 (0x00000000)
// (lldb) 


////                                                    SET BREAK POINT then RUN CODE IN DEBUGGER
//                                                        (lldb) breakpoint set --file test.c --line 12
//                                                        (lldb) br s -f test.c -l 12
//                                                        (lldb) b test.c:12
//
// (lldb) b test_c++.cc:118
// Breakpoint 1: where = test_c++`main + 48 at test_c++.cc:118:15, address = 0x0000000100003000
// (lldb) r
// Process 4897 launched: '/Users/simon/a_syllabus/lang/c++/repos/gdb_lldb/test_c++' (x86_64)
// 0
// Process 4897 stopped
// * thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
//     frame #0: 0x0000000100003000 test_c++`main at test_c++.cc:118:15
//    115 	
//    116 	int main () {
//    117 	    int c;              //
// -> 118 	    
//    119 	    std::cout << a << std::endl;
//    120 	    std::cout << b << std::endl;;
//    121 	    std::cout << c << std::endl;;
// Target 0: (test_c++) stopped.
// (lldb) expression c
// (int) $0 = 1
// (lldb) 

////                                                    LIST FRAME variables   ve
////                                                         TARGET variables
// 
// (lldb) frame variable
// (int) c = 1
// (lldb) fr v                         // shorthand
// (int) c = 1
// 
// (lldb) target variable
// Global variables for /Users/simon/a_syllabus/lang/c++/repos/gdb_lldb/test_c++.cc in /Users/simon/a_syllabus/lang/c++/repos/gdb_lldb/test_c++:
// (int) ::a = 0
// (char [12]) ::b = "DEADBEEF"
// 
// (lldb) ta v                         // shorthand
// Global variables for /Users/simon/a_syllabus/lang/c++/repos/gdb_lldb/test_c++.cc in /Users/simon/a_syllabus/lang/c++/repos/gdb_lldb/test_c++:
// (int) ::a = 0
// (char [12]) ::b = "DEADBEEF"
// (lldb) 
